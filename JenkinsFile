pipeline {
    agent any

    environment {
        // Define the Maven tool installation name
        MAVEN_HOME = tool name: 'Maven', type: 'maven'
        // Credential ID for ReportPortal token
        RP_CREDS = 'rpCreds'
        REPORTPORTAL_URL = 'http://localhost:8080'
        REPORTPORTAL_PROJECT = 'cucumber'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/atulsharmacsk/CucumberReportPortal'
            }
        }

        stage('Setting Up ReportPortal') {
            steps {
                script {
                    withCredentials([string(credentialsId: env.RP_CREDS, variable: 'token')]) {
                        def content = """
                            rp.api.key=${token}
                            rp.launch=JENKINS_DEMO_${JOB_BASE_NAME}
                            rp.description=${JOB_URL}${BUILD_NUMBER}
                            rp.attributes=Cucumber:${JOB_BASE_NAME}
                        """.stripIndent()
                        def filePath = "${WORKSPACE}/src/test/resources/reportportal.properties"
                        writeFile file: filePath, text: content

                        // Print content of the updated file
                        echo "Updated content of ${filePath}:"
                        echo readFile(filePath)
                    }
                }
            }
        }

        stage('Build') {
            steps {
                // Run Maven commands based on the detected OS
                script {
                    try {
                        bat "\"${MAVEN_HOME}\\bin\\mvn\" clean test"
                    } catch (Exception e) {
                        echo "Build stage failed with error: ${e}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Link RP to Jenkins') {
            steps {
                script {
                    // Get latest launch ID
                    withCredentials([string(credentialsId: env.RP_CREDS, variable: 'token')]) {
                        def response = httpRequest(
                            url: "${env.REPORTPORTAL_URL}/api/v1/${env.REPORTPORTAL_PROJECT}/launch?page.page=1&page.size=1&page.sort=startTime,desc",
                            customHeaders: [
                                [
                                    name: 'Authorization',
                                    value: "Bearer ${token}",
                                    maskValue: true
                                ]
                            ]
                        )
                        def jsonResponse = readJSON text: response.content
                        def latestLaunchId = jsonResponse.content[0].id

                        def link = "<a href=\"${env.REPORTPORTAL_URL}/ui/#${env.REPORTPORTAL_PROJECT}/launches/all/${latestLaunchId}\">go to launch #${latestLaunchId}</a>"
                        currentBuild.description = link
                    }
                }
            }
        }

        stage('Rerun Failed Cases') {
            when {
                expression { currentBuild.result == 'FAILURE' }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: env.RP_CREDS, variable: 'token')]) {
                        // Get latest launch ID
                        def response = httpRequest(
                            url: "${env.REPORTPORTAL_URL}/api/v1/${env.REPORTPORTAL_PROJECT}/launch?page.page=1&page.size=1&page.sort=startTime,desc",
                            customHeaders: [
                                [
                                    name: 'Authorization',
                                    value: "Bearer ${token}",
                                    maskValue: true
                                ]
                            ]
                        )
                        def jsonResponse = readJSON text: response.content
                        def latestLaunchId = jsonResponse.content[0].uuid
                        echo "Latest Launch ID: ${latestLaunchId}"
                        // Store the launch ID for later use
                        env.LATEST_LAUNCH_ID = latestLaunchId
                    }

                    // Append to reportportal.properties for rerun
                    def rerunContent = """
                        rp.rerun=true
                        rp.rerun.of=${env.LATEST_LAUNCH_ID}
                        rp.launch.uuid=${env.LATEST_LAUNCH_ID}
                        rp.logging=true
                        rp.log.level=DEBUG
                    """.stripIndent()
                    def existingContent = readFile(filePath).trim()
                    writeFile file: filePath, text: existingContent + "\n" + rerunContent
                    // Print content of the updated file
                    echo "Updated content of ${filePath}:"
                    echo readFile(filePath)

                    bat "\"${MAVEN_HOME}\\bin\\mvn\" exec:java@rerun-failed-tests"
                }
            }
        }
    }
}
